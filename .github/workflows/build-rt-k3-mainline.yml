name: build rt-ac3100-mainline
permissions:
  contents: write
on: 
  workflow_dispatch:
    inputs:
      eth0:
        description: 'Your Eth0 Mac'
        required: true
        default: '00:11:22:33:44:55'
      Wlan0:
        description: 'Your Eth1(2.4g) Mac'
        required: true
        default: '00:11:22:33:44:66'
      Wlan1:
        description: 'Your Eth2(5g) Mac'
        required: true
        default: '00:11:22:33:44:77'
  release:
    types: [published]
  push:
    tags:
    - 'v*'
    
env:
  ET0MACADDR: ${{ github.event.inputs.eth0 }}
  MACADDR1_24G: ${{ github.event.inputs.Wlan0 }}
  MACADDR2_5G: ${{ github.event.inputs.Wlan1 }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    defaults:
      run:
        shell: bash   
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup environment
      run: |
        set -e
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
        apt-get install -y software-properties-common bash git wget curl build-essential
        add-apt-repository universe
        apt-get update
        apt-get install -y libncurses5-dev libncursesw5-dev \
        zlib1g-dev gawk gettext libssl-dev xsltproc rsync gcc-multilib \
        u-boot-tools mtd-utils device-tree-compiler \
        libtool-bin cmake libproxy-dev uuid-dev liblzo2-dev autoconf automake \
        bison bzip2 diffutils file flex g++ gperf grep groff-base \
        libc6-dev libexpat1-dev libffi-dev libncurses5-dev libsigsegv2 \
        libslang2 libssl-dev libtool libxml-parser-perl make patch perl pkg-config \
        python sed shtool tar texinfo unzip zlib1g zlib1g-dev
        
        # Install cross-compilation toolchain
        apt-get install -y gcc-mipsel-linux-gnu
        
        # Install additional dependencies
        apt-get install -y libelf-dev
        
    - name: Clone source code
      run: |
        set -e
        # 克隆主仓库，使用 386.12_x 分支
        git clone -b 386.12_x https://github.com/RMerl/asuswrt-merlin.ng.git
        cd asuswrt-merlin.ng
    
        # 显示当前分支和最后一次提交
        git status
        git log -1 --oneline
    
        # 克隆 am-toolchains
        cd ..
        git clone https://github.com/RMerl/am-toolchains.git

        # 创建必要的目录
        mkdir -p /media/asuswrt/
        mkdir -p /opt/images/

        # 创建符号链接
        ln -sf $(pwd)/asuswrt-merlin.ng /media/asuswrt/asuswrt-merlin.ng

        # 显示目录结构
        echo "Directory structure:"
        cd /media/asuswrt/asuswrt-merlin.ng
        find . -maxdepth 3 -type d

        # 检查 router/Makefile 是否存在
        if [ -f "release/src/router/Makefile" ]; then
          echo "router/Makefile exists"
          echo "First few lines of router/Makefile:"
          head -n 10 release/src/router/Makefile
        else
          echo "router/Makefile does not exist"
          echo "Contents of release/src/router:"
          ls -la release/src/router
        fi

        # 设置环境变量
        echo "MERLIN_VERSION=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "MERLIN_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: Check Directory Structure
      run: |
        set -e
        echo "Current working directory:"
        pwd
        echo "Searching for *_nvram.txt files:"
        find /media/asuswrt/asuswrt-merlin.ng -name "*_nvram.txt"
        echo "Contents of src-rt-7.14.114.x/src directory:"
        ls -R /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src || echo "Directory not found"

    - name: Setup build environment
      run: |
        set -e
        cd /media/asuswrt/asuswrt-merlin.ng || exit 1
        
        ln -sf $(pwd)/../am-toolchains/brcm-arm-hnd /opt/toolchains
        ln -sf $(pwd)/../am-toolchains/brcm-arm-sdk/hndtools-arm-linux-2.6.36-uclibc-4.5.3 /opt/brcm-arm
        
        echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/toolchains/crosstools-arm-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/lib" >> ~/.bashrc
        echo "export PATH=$PATH:/opt/toolchains/crosstools-arm-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/bin:/opt/brcm-arm/bin" >> ~/.bashrc
        
        source ~/.bashrc
        
        echo "Current directory: $(pwd)"
        echo "PATH: $PATH"
        echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        ls -l /opt/toolchains || echo "Directory /opt/toolchains does not exist"
        ls -l /opt/brcm-arm || echo "Directory /opt/brcm-arm does not exist"
        
        which mipsel-linux-gnu-gcc || echo "mipsel-linux-gnu-gcc not found in PATH"

    - name: Modify File
      run: |
        set -e
        # 查找 nvram 文件
        NVRAM_FILE=$(find /media/asuswrt/asuswrt-merlin.ng -type f $$ -name "*_nvram.txt" -o -name "*AC3100*" $$ | head -n 1)
        
        if [ -z "$NVRAM_FILE" ]; then
          echo "Error: Could not find nvram file"
          echo "Searching for any .txt file as a fallback:"
          NVRAM_FILE=$(find /media/asuswrt/asuswrt-merlin.ng -type f -name "*.txt" | head -n 1)
          if [ -z "$NVRAM_FILE" ]; then
            echo "Error: Could not find any .txt file"
            exit 1
          fi
        fi
        
        echo "Found potential nvram file: $NVRAM_FILE"
        echo "File contents:"
        cat "$NVRAM_FILE"
        
        # 检查文件是否包含我们需要修改的内容
        if ! grep -q "et0macaddr" "$NVRAM_FILE"; then
          echo "Error: File does not contain expected content"
          exit 1
        fi
        
        # 修改文件
        sed -i "s/^et0macaddr=.*/et0macaddr=$ET0MACADDR/" "$NVRAM_FILE"
        sed -i "s/^1:macaddr=.*/1:macaddr=$MACADDR1_24G/" "$NVRAM_FILE"
        sed -i "s/^2:macaddr=.*/2:macaddr=$MACADDR2_5G/" "$NVRAM_FILE"
        
        echo "Modified content:"
        grep -E '^(et0macaddr|1:macaddr|2:macaddr)' "$NVRAM_FILE"

    - name: Prepare Configuration
      run: |
        set -e
        cd /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src
    
        # 设置环境变量
        export PATH=$PATH:/opt/brcm-arm/bin:/opt/toolchains/crosstools-arm-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/bin
        export STAGING_DIR=/media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/staging_dir
        export BUILD_NAME=RT-AC3100
        export OPENSSLDIR=/usr/lib/ssl
        export CONFIGURE_ARGS="--with-openssl=$OPENSSLDIR"
    
        # 创建 .config 文件
        cat << EOF > .config
        CONFIG_BCMWL5=y
        CONFIG_BCMWL6=y
        CONFIG_BCM7=y
        CONFIG_BCMARM=y
        CONFIG_RT_AC3100=y
        CONFIG_RTCONFIG_HTTPS=y
        CONFIG_RTCONFIG_SSH=y
        CONFIG_RTCONFIG_BCMARM=y
        CONFIG_RTCONFIG_OPENSSL11=y
        EOF
    
        # 创建一个空的 save-config 文件
        touch save-config
    
        # 检查 router/Makefile
        ROUTER_MAKEFILE="../router/Makefile"
        if [ -f "$ROUTER_MAKEFILE" ]; then
          echo "Contents of router/Makefile around OpenSSL definition:"
          sed -n '/OPENSSL/,+10p' "$ROUTER_MAKEFILE"
        else
          echo "router/Makefile not found at $ROUTER_MAKEFILE"
          echo "Contents of current directory:"
          ls -la
        fi
    
        # 验证配置
        echo "Environment variables:"
        env | grep -E "PATH|STAGING_DIR|BUILD_NAME|OPENSSL"
        
        echo "Config file contents:"
        cat .config
    
        # 检查关键文件和目录
        echo "Checking key files and directories:"
        ls -l .config save-config ../router/Makefile
    
        # 尝试运行 make setprofile 命令并显示详细输出
        echo "Testing make setprofile command:"
        make -n setprofile
    
        echo "Running make setprofile with verbose output:"
        make setprofile V=s

    - name: Build Firmware
      run: |
        set -e
        cd /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src
    
        # 重新设置环境变量，以确保它们在新的 shell 中可用
        export PATH=$PATH:/opt/brcm-arm/bin:/opt/toolchains/crosstools-arm-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/bin
        export STAGING_DIR=/media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/staging_dir
        export BUILD_NAME=RT-AC3100
        export OPENSSLDIR=/usr/lib/ssl
        export CONFIGURE_ARGS="--with-openssl=$OPENSSLDIR"
    
        make setprofile
        make RT-AC3100
    
        if [ $? -ne 0 ]; then
          echo "Compilation failed. Showing last 100 lines of error log:"
          tail -n 100 /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/RT-AC3100.log
          exit 1
        fi

    - name: Move file && Checksum
      run: |
        set -e
        mkdir -p /opt/images
        find /media/asuswrt/asuswrt-merlin.ng -name "*.trx" -exec cp {} /opt/images/ \;
        find /media/asuswrt/asuswrt-merlin.ng -name "*_nvram.txt" -exec cp {} /opt/images/ \;
        find /media/asuswrt/asuswrt-merlin.ng -name "cfe*.bin" -exec cp {} /opt/images/ \;
        
        cd /opt/images
        sha256sum * > checksum.txt
        
        echo "Contents of /opt/images:"
        ls -la /opt/images

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: "/opt/images/*"
        tag_name: ${{ env.BUILD_DATE }}_RT-AC3100_${{ env.MERLIN_TAG }}
        body: |
          This is a build for RT-AC3100 from Asuswrt-Merlin 386.12_x branch
          Version: https://github.com/RMerl/asuswrt-merlin.ng/commit/${{ env.MERLIN_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
