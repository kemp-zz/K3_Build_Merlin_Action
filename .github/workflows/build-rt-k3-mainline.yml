name: build rt-k3-mainline
permissions:
  contents: write
on: 
  workflow_dispatch:
    inputs:
      eth0:
        description: 'Your Eth0 Mac'
        required: true
        default: '00:11:22:33:44:55'
      Wlan0:
        description: 'Your Eth1(2.4g) Mac'
        required: true
        default: '00:11:22:33:44:66'
      Wlan1:
        description: 'Your Eth2(5g) Mac'
        required: true
        default: '00:11:22:33:44:77'
  release:
    types: [published]
  push:
    tags:
    - 'v*'
    
env:
  ET0MACADDR: ${{ github.event.inputs.eth0 }}
  MACADDR1_24G: ${{ github.event.inputs.Wlan0 }}
  MACADDR2_5G: ${{ github.event.inputs.Wlan1 }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Update && install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update
        sudo apt-get install -y libncurses5 libncurses5-dev m4 bison gawk flex g++ \
        gengetopt git zlib1g-dev autoconf autopoint libtool-bin shtool autogen \
        mtd-utils intltool sharutils docbook-xsl-* texinfo dos2unix xsltproc \
        u-boot-tools device-tree-compiler qemu gperf liblzo2-dev uuid-dev build-essential \
        lzma-dev liblzma-dev lzma binutils-dev patch cmake intltool libglib2.0-dev \
        gtk-doc-tools automake perl gcc-multilib libc6-i386 lib32stdc++6 lib32z1
        
        # 尝试安装 gcc-9-arm-linux-gnueabi
        sudo apt-get install -y gcc-9-arm-linux-gnueabi
        
        # 如果上面失败，尝试安装 gcc-arm-linux-gnueabi
        sudo apt-get install -y gcc-arm-linux-gnueabi
        
        sudo apt install automake-1.15
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y lsb-core libstdc++6:i386

    - name: Debug package info
      run: |
        echo "Installed gcc versions:"
        dpkg -l | grep gcc
        echo "Available gcc-arm-linux-gnueabi packages:"
        apt-cache policy gcc-arm-linux-gnueabi
        echo "Available gcc-9-arm-linux-gnueabi packages:"
        apt-cache policy gcc-9-arm-linux-gnueabi

    - name: Fix aclocal error
      run: |
        # 检查并创建 aclocal 链接
        if [ ! -e /usr/bin/aclocal-1.15 ]; then
          sudo ln -s /usr/bin/aclocal /usr/bin/aclocal-1.15
        elif [ ! -L /usr/bin/aclocal-1.15 ]; then
          sudo mv /usr/bin/aclocal-1.15 /usr/bin/aclocal-1.15.bak
          sudo ln -s /usr/bin/aclocal /usr/bin/aclocal-1.15
        fi

        # 检查并创建 automake 链接
        if [ ! -e /usr/bin/automake-1.15 ]; then
          sudo ln -s /usr/bin/automake /usr/bin/automake-1.15
        elif [ ! -L /usr/bin/automake-1.15 ]; then
          sudo mv /usr/bin/automake-1.15 /usr/bin/automake-1.15.bak
          sudo ln -s /usr/bin/automake /usr/bin/automake-1.15
        fi

        # 验证链接是否正确创建
        ls -l /usr/bin/aclocal-1.15
        ls -l /usr/bin/automake-1.15

    - name: Update x86 package
      run: |
        sudo dpkg --print-foreign-architectures
        sudo apt-get update
        sudo apt-get install -y libc6-i386 lib32stdc++6 lib32z1 libelf1:i386 lib32ncurses5-dev libc6-dev-i386
        
    - name: Clone source code
      run: |       
        git clone https://github.com/godcong/asuswrt-merlin.ng
        git clone https://github.com/godcong/k3screenctrl asuswrt-merlin.ng/release/src/router/k3screenctrl 
        git clone https://github.com/RMerl/am-toolchains.git
               
        sudo mkdir -p /media/asuswrt/
        sudo mkdir -p /opt/images/
        
    - name: Link Directory
      run: |       
        sudo ln -s $(pwd)/am-toolchains/brcm-arm-hnd /opt/toolchains
        sudo ln -s $(pwd)/am-toolchains/brcm-arm-sdk/hndtools-arm-linux-2.6.36-uclibc-4.5.3 /opt/brcm-arm
        sudo ln -sf bash /bin/sh
        echo "export LD_LIBRARY_PATH=$LD_LIBRARY:/opt/toolchains/crosstools-arm-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/lib" >> ~/.profile
        echo "export TOOLCHAIN_BASE=/opt/toolchains" >> ~/.profile
        echo "PATH=\$PATH:/opt/toolchains/crosstools-arm-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/bin" >> ~/.profile
        echo "PATH=\$PATH:/opt/toolchains/crosstools-aarch64-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/bin" >> ~/.profile  
        
        sudo ln -s $(pwd)/asuswrt-merlin.ng /media/asuswrt/asuswrt-merlin.ng       
        
        cd /media/asuswrt/asuswrt-merlin.ng
        git checkout mainline    
        echo "MERLIN_VERSION=$(git show-ref --heads -s)" >> $GITHUB_ENV
        echo "MERLIN_TAG=$(git show-ref --heads --hash=8)" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
    
    - name: Modify File
      run: |
        cd /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/cfe/build/broadcom/bcm947xx/compressed
        echo "replace mac address from $(grep ^et0macaddr rt-k3_nvram.txt) to ${{ env.ET0MACADDR }}"
        sed -i 's/^et0macaddr=.*/et0macaddr=${{ env.ET0MACADDR }}/g' rt-k3_nvram.txt
        echo "replace mac 2.4g address from $(grep ^1:macaddr rt-k3_nvram.txt) to ${{ env.MACADDR1_24G }}"
        sed -i 's/^1:macaddr=.*/1:macaddr=${{ env.MACADDR1_24G }}/g' rt-k3_nvram.txt
        echo "replace mac 5g address from $(grep ^2:macaddr rt-k3_nvram.txt) to ${{ env.MACADDR2_5G }}"
        sed -i 's/^2:macaddr=.*/2:macaddr=${{ env.MACADDR2_5G }}/g' rt-k3_nvram.txt
        
        # 打印修改后的内容以验证
        echo "Modified content:"
        grep -E '^(et0macaddr|1:macaddr|2:macaddr)' rt-k3_nvram.txt

    - name: Increase shell limits
      run: |
        echo "Current limits:"
        ulimit -a
        echo "Attempting to increase limits:"
        ulimit -s unlimited
        ulimit -a

    - name: Build Firmware
      run: |
        export PATH=$PATH:/opt/brcm-arm/bin
        export STAGING_DIR=/media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/staging_dir

        cd  /media/asuswrt/asuswrt-merlin.ng/release/src-rt
        echo "add tag to version"
        sed -i 's/EXTENDNO=.*/&_${{ env.MERLIN_TAG }}/g' version.conf
        
        cd /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src
        
        # 添加调试信息
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "Makefile contents:"
        cat Makefile | grep -i "build_name"
        
        # 拆分 make rt-k3 命令
        make configure
        make clean
        
        # 使用 xargs 处理可能的长参数列表
        find . -type f -name '*.[ch]' | xargs -n 100 touch
        
        # 直接运行 make 命令，确保传递所有必要的参数
        make BUILD_NAME=rt-k3 PROFILE=rt-k3 image
        echo "build image done"     
        
        cd /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/cfe/
        make
        echo "build cfe done"
        
    - name: Move file && Checksum
      run: |
        sudo mv -f /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/image/*.trx /opt/images/
        sudo cp /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/cfe/build/broadcom/bcm947xx/compressed/rt-k3_nvram.txt /opt/images/
        sudo cp /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/cfe/cfe*.bin /opt/images/
        
        sha256sum /opt/images/* > /opt/images/checksum.txt

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: "/opt/images/*.*,release/src-rt-7.14.114.x/src/cfe/cfe_rt-k3.bin"  
        tag_name: ${{ env.BUILD_DATE }}_mainline_k3_${{ env.MERLIN_TAG }}
        body: |
          this is only a latest build from mainline
          version: https://github.com/godcong/asuswrt-merlin.ng/commit/${{ env.MERLIN_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
