name: build rt-k3-mainline
permissions:
  contents: write
on: 
  workflow_dispatch:
    inputs:
      eth0:
        description: 'Your Eth0 Mac'
        required: true
        default: '00:11:22:33:44:55'
      Wlan0:
        description: 'Your Eth1(2.4g) Mac'
        required: true
        default: '00:11:22:33:44:66'
      Wlan1:
        description: 'Your Eth2(5g) Mac'
        required: true
        default: '00:11:22:33:44:77'
  release:
    types: [published]
  push:
    tags:
    - 'v*'
    
env:
  ET0MACADDR: ${{ github.event.inputs.eth0 }}
  MACADDR1_24G: ${{ github.event.inputs.Wlan0 }}
  MACADDR2_5G: ${{ github.event.inputs.Wlan1 }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Update && install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update
        sudo apt-get install -y libncurses5 libncurses5-dev m4 bison gawk flex g++ \
        gengetopt git zlib1g-dev autoconf autopoint libtool-bin shtool autogen \
        mtd-utils intltool sharutils docbook-xsl-* texinfo dos2unix xsltproc \
        u-boot-tools device-tree-compiler qemu gperf liblzo2-dev uuid-dev build-essential \
        lzma-dev liblzma-dev lzma binutils-dev patch cmake intltool libglib2.0-dev \
        gtk-doc-tools automake perl gcc-multilib libc6-i386 lib32stdc++6 lib32z1 \
        libssl-dev
        
        sudo apt-get install -y gcc-arm-linux-gnueabi
        sudo apt-get install -y gcc-arm-linux-gnueabihf
        
        sudo apt install automake-1.15
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y lsb-core libstdc++6:i386

    - name: Debug package info
      run: |
        echo "Installed gcc versions:"
        dpkg -l | grep gcc
        echo "Available gcc-arm-linux-gnueabi packages:"
        apt-cache policy gcc-arm-linux-gnueabi
        echo "Available gcc-arm-linux-gnueabihf packages:"
        apt-cache policy gcc-arm-linux-gnueabihf

    - name: Clone source code
      run: |
        # 创建必要的目录
        sudo mkdir -p /media/asuswrt
        sudo mkdir -p /opt/images
    
        # 克隆仓库
        git clone https://github.com/godcong/asuswrt-merlin.ng
        git clone https://github.com/godcong/k3screenctrl asuswrt-merlin.ng/release/src/router/k3screenctrl 
        git clone https://github.com/RMerl/am-toolchains.git
    
        # 创建符号链接
        sudo ln -sf $(pwd)/asuswrt-merlin.ng /media/asuswrt/asuswrt-merlin.ng
    
        # 显示克隆的仓库内容
        echo "Contents of current directory:"
        ls -l
        echo "Contents of /media/asuswrt:"
        ls -l /media/asuswrt
        echo "Contents of am-toolchains:"
        ls -l am-toolchains
            # 显示克隆的仓库内容
        echo "Contents of current directory:"
        ls -l
        echo "Contents of am-toolchains:"
        ls -l am-toolchains

    - name: Setup build environment
      run: |
       cd /media/asuswrt/asuswrt-merlin.ng || exit 1
    
       # 安装必要的工具链
       sudo apt-get update
       sudo apt-get install -y gcc-mipsel-linux-gnu
    
       # 设置交叉编译工具链
       export PATH=$PATH:/opt/brcm-arm/bin:/opt/toolchains/crosstools-arm-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/bin
       echo "export PATH=$PATH" >> ~/.bashrc
    
       # 创建符号链接
       sudo ln -sf /usr/bin/mipsel-linux-gnu-gcc /usr/bin/mipsel-uclibc-gcc
    
       # 应用环境变量
       source ~/.bashrc
    
       # 显示环境信息
       echo "Current directory: $(pwd)"
       echo "PATH: $PATH"
       echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
       ls -l /opt/toolchains || echo "Directory /opt/toolchains does not exist"
       ls -l /opt/brcm-arm || echo "Directory /opt/brcm-arm does not exist"
    
       # 检查交叉编译工具是否可用
       which mipsel-uclibc-gcc || echo "mipsel-uclibc-gcc not found in PATH"
    
       git checkout mainline    
       echo "MERLIN_VERSION=$(git show-ref --heads -s)" >> $GITHUB_ENV
       echo "MERLIN_TAG=$(git show-ref --heads --hash=8)" >> $GITHUB_ENV
       echo "BUILD_DATE=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
    - name: Modify File
      run: |
        cd /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/cfe/build/broadcom/bcm947xx/compressed
        echo "replace mac address from $(grep ^et0macaddr rt-k3_nvram.txt) to ${{ env.ET0MACADDR }}"
        sed -i 's/^et0macaddr=.*/et0macaddr=${{ env.ET0MACADDR }}/g' rt-k3_nvram.txt
        echo "replace mac 2.4g address from $(grep ^1:macaddr rt-k3_nvram.txt) to ${{ env.MACADDR1_24G }}"
        sed -i 's/^1:macaddr=.*/1:macaddr=${{ env.MACADDR1_24G }}/g' rt-k3_nvram.txt
        echo "replace mac 5g address from $(grep ^2:macaddr rt-k3_nvram.txt) to ${{ env.MACADDR2_5G }}"
        sed -i 's/^2:macaddr=.*/2:macaddr=${{ env.MACADDR2_5G }}/g' rt-k3_nvram.txt
        
        echo "Modified content:"
        grep -E '^(et0macaddr|1:macaddr|2:macaddr)' rt-k3_nvram.txt

    - name: Build Firmware
      run: |
        cd /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src
    
        # 设置环境变量
        export PATH=$PATH:/opt/brcm-arm/bin:/opt/toolchains/crosstools-arm-gcc-5.3-linux-4.1-glibc-2.22-binutils-2.25/usr/bin
        export STAGING_DIR=/media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/staging_dir
        export BUILD_NAME=RT-K3
        export OPENSSL=1
        export OPENSSLDIR=/usr/lib/ssl
        export CONFIGURE_ARGS="--with-openssl=$OPENSSLDIR"
    
        # 创建配置文件
        cat << EOF > .config
        CONFIG_BCMWL5=y
        CONFIG_BCMWL6=y
        CONFIG_BCM7=y
        CONFIG_BCMARM=y
        CONFIG_RT_K3=y
        CONFIG_OPENSSL11=y
        EOF
    
        # 显示环境变量和配置文件内容
        echo "Environment variables:"
        env | grep -E "PATH|STAGING_DIR|BUILD_NAME|OPENSSL"
        echo "Config file contents:"
        cat .config
    
        # 修改 Makefile 以确保 OpenSSL 被定义
        if grep -q "OPENSSL=" Makefile; then
          sed -i 's/^#\s*OPENSSL=.*$/OPENSSL=1/' Makefile
        else
          echo "OPENSSL=1" >> Makefile
        fi
    
        # 显示 Makefile 中的 OPENSSL 定义
        echo "OPENSSL definition in Makefile:"
        grep OPENSSL Makefile
    
        # 清理和编译
        make distclean
        make RT-K3
    
        # 如果编译失败，显示错误日志
        if [ $? -ne 0 ]; then
          echo "Compilation failed. Showing last 100 lines of error log:"
          tail -n 100 /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/RT-K3.log
        fi
    - name: Move file && Checksum
      run: |
        sudo mv -f /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/image/*.trx /opt/images/
        sudo cp /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/cfe/build/broadcom/bcm947xx/compressed/rt-k3_nvram.txt /opt/images/
        sudo cp /media/asuswrt/asuswrt-merlin.ng/release/src-rt-7.14.114.x/src/cfe/cfe*.bin /opt/images/
        
        sha256sum /opt/images/* > /opt/images/checksum.txt

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: "/opt/images/*.*,release/src-rt-7.14.114.x/src/cfe/cfe_rt-k3.bin"  
        tag_name: ${{ env.BUILD_DATE }}_mainline_k3_${{ env.MERLIN_TAG }}
        body: |
          this is only a latest build from mainline
          version: https://github.com/godcong/asuswrt-merlin.ng/commit/${{ env.MERLIN_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
